//4.13 main
#include <iostream>
#include "Gas.h"
#include <iomanip>
using namespace std;

int main()
{
    Gas gas1{0,0,0,0};
    cout<<"Enter miles driven (-1 to quit): ";
        int m;
        cin>>m;
        gas1.setMilesDriven(m);
    while (gas1.getMilesDriven() != -1){

        cout<<"Enter gallons used: ";
        int g;
        cin>>g;
        gas1.setGallonsUsed(g);

        cout<<"MPG this trip: ";
        cout<<setprecision(8)<<gas1.calculateMPG();

        cout<<"\nTotal MPG: ";
        cout<<setprecision(8)<<gas1.calculateTMPG();

        cout<<"\n\nEnter miles driven (-1 to quit): ";
        int m;
        cin>>m;
        gas1.setMilesDriven(m);

    }
    return 0;
}

//4.13 Class
#ifndef GAS_H
#define GAS_H
class Gas {
    public:
        Gas(double milesDriven, double gallonsUsed, double totalMiles, double totalGallons)
        : miles{milesDriven}, gallons{gallonsUsed}, totalM{totalMiles}, totalG{totalGallons}{

        }
    void setMilesDriven(double driven){
    miles=driven;
    totalM=totalM+miles;
    }

    double getMilesDriven(){
    return miles;
    }

    void setGallonsUsed(double used){
    gallons=used;
    totalG=totalG+gallons;
    }

    double getGallonsUsed(){
    return gallons;
    }

    double calculateMPG(){
    double mpg;
    mpg=miles/gallons;
    return mpg;
    }

    double calculateTMPG(){
    double tmpg;
    tmpg=totalM/totalG;
    return tmpg;
    }

    private:
        double miles{0};
        double gallons{0};
        double totalM{0};
        double totalG{0};
};


#endif // GAS_H
//RUN:
//Enter miles driven (-1 to quit): 270
//Enter gallons used: 12
//MPG this trip: 22.5
//Total MPG: 22.5

//Enter miles driven (-1 to quit): 40
//Enter gallons used: 5
//MPG this trip: 8
//Total MPG: 18.235294

//4.17
#include <iostream>

using namespace std;

int main()
{
    int counter=1;
    cout << "Enter number: ";
    int largest;
    cin>>largest;
    int number;
    while (counter<10){
        cout << "Enter number: ";
        cin>>number;
        counter++;
        if(number>largest){
            largest=number;
            }
    }
    cout <<"largest number was "<< largest;

}
//RUN:
//Enter number: 1
//Enter number: 3
//Enter number: 4
//Enter number: 5
//Enter number: 6
//Enter number: 8
//Enter number: 10
//Enter number: 2
//Enter number: 8
//Enter number: 4
//largest number was 10

//Problem 4.26
#include <iostream>
using namespace std;

int main()
{
    cout<<"Enter square size: ";
    int s;
    cin>>s;
    int counter{0};
    int counter2{0};
    if (s>20||s<0){
        cout<<"Size must be <20. Restart program.";
        counter=s;
        return 0;
    }
        while(counter<s){
            cout<<"*";
            counter++;
        }
        cout<<"\n";
        counter=1;
        while (counter<s-1){
            cout<<"*";
            while (counter2<s-2){
                cout<<" ";
                counter2++;
            }
            counter2=0;
            cout<<"*\n";
            counter++;
        }
        counter=0;
        while(counter<s){
            cout<<"*";
            counter++;
        }
    }

\\Enter square size: 9
\\*********
\\*       *
\\*       *
\\*       *
\\*       *
\\*       *
\\*       *
\\*       *
\\*********
\\Process returned 0 (0x0)   execution time : 1.594 s
\\Press any key to continue.

\\4.35a
#include <iostream>

using namespace std;

int main()
{
    cout<<"Enter number for factorial:";
    int maxn;
    cin>>maxn;
    int counter{1};
    int result{1};
    while(counter<=maxn){
        result=result*counter;
        counter++;
        cout<<counter;
    }
    cout<<"The factorial of "<<maxn<<" is "<<result;
}
\\4.35b
#include <iostream>
#include <iomanip>
using namespace std;

int main()
{
    cout<<"Enter desired accuracy for e:";
    int maxn;
    cin>>maxn;
    int counter{1};
    float e{1};
    while(counter<=maxn){
        int counter2{1};
        int max2{counter};
        float result{1};
        while(counter2<=max2){
            result=result*counter2;
            counter2++;
    }
    e=e+(1/(result));
    counter++;
    }
    cout << setprecision(maxn) << fixed;
    cout << "e, with precision of " << maxn <<" place is "<<e;
}
\\4.35c
#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;

int main()
{
    cout<<"Enter desired accuracy for e exponential: ";
    int maxn;
    cin>>maxn;
    cout<<"enter power for e exponential: ";
    int power;
    cin>>power;
    int counter{1};
    float e{1};
    while(counter<=maxn){
        int counter2{1};
        int max2{counter};
        float result{1};
        while(counter2<=max2){
            result=result*counter2;
            counter2++;
    }
    e=e+(pow(counter,power)/(result));
    counter++;
    }
    cout << setprecision(maxn) << fixed;
    cout << "e to the "<<power<<" with precision of " << setprecision(maxn)<< maxn <<" place is "<<e;
}

//Problem 4.36 main
#include <iostream>
#include "Account.h"
#include <iomanip>
using namespace std;

int main()
{
   Account account1{"Jane Green", 50.14};
   Account account2{"John Blue", -7};

   // display initial balance of each object
   cout << "account1: " << account1.getName() << " balance is $"
      << setprecision(2) << fixed << account1.getBalance();
   cout << "\naccount2: " << account2.getName() << " balance is $"
      << setprecision(2) << fixed << account2.getBalance();

   cout << "\n\nEnter deposit amount for account1: "; // prompt
   float depositAmount;
   cin >> depositAmount; // obtain user input
   cout << "adding " << setprecision(2) << fixed << depositAmount << " to account1 balance";
   account1.deposit(depositAmount); // add to account1's balance

   // display balances
   cout << "\n\naccount1: " << account1.getName() << " balance is $"
      << setprecision(2) << fixed << account1.getBalance();
   cout << "\naccount2: " << account2.getName() << " balance is $"
      << account2.getBalance();

   cout << "\n\nEnter deposit amount for account2: "; // prompt
   cin >> depositAmount; // obtain user input
   cout << "adding " << setprecision(2) << fixed << depositAmount << " to account2 balance";
   account2.deposit(depositAmount); // add to account2 balance

   // display balances
   cout << "\n\naccount1: " << account1.getName() << " balance is $"
      << setprecision(2) << fixed << account1.getBalance();
   cout << "\naccount2: " << account2.getName() << " balance is $"
      << setprecision(2) << fixed << account2.getBalance() << endl;
}
//Problem 4.36 class

class Account {
public:
   // Account constructor with two parameters
   Account(std::string accountName, float initialBalance)
      : name{accountName} { // assign accountName to data member name

      // validate that the initialBalance is greater than 0; if not,
      // data member balance keeps its default initial value of 0
      if (initialBalance > 0) { // if the initialBalance is valid
         balance = initialBalance; // assign it to data member balance
      }
   }

   // function that deposits (adds) only a valid amount to the balance
   void deposit(float depositAmount) {
      if (depositAmount > 0) { // if the depositAmount is valid
         balance = balance + depositAmount; // add it to the balance
      }
   }

   // function returns the account balance
   float getBalance() const {
      return balance;
   }

   // function that sets the name
   void setName(std::string accountName) {
      name = accountName;
   }

   // function that returns the name
   std::string getName() const {
      return name;
   }
private:
   std::string name; // account name data member
   float balance{0}; // data member with default initial value
}; // end class Account



